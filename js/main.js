(() => {

  //variables
  const model = document.querySelector("#model");
  const hotspots = document.querySelectorAll(".Hotspot");

  const container = document.querySelector("#container");

  const materialTemplate = document.querySelector("#materials-template");
  const materialList = document.querySelector("#materials-list");



const spinner = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: none; display: block; shape-rendering: auto;" width="204px" height="204px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
<g transform="rotate(0 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.5398671096345515s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(25.714285714285715 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.49833887043189373s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(51.42857142857143 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.45681063122923593s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(77.14285714285714 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.41528239202657813s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(102.85714285714286 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.37375415282392027s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(128.57142857142858 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.33222591362126247s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(154.28571428571428 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.29069767441860467s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(180 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.24916943521594687s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(205.71428571428572 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.20764119601328906s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(231.42857142857142 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.16611295681063123s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(257.14285714285717 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.12458471760797343s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(282.85714285714283 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.08305647840531562s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(308.57142857142856 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="-0.04152823920265781s" repeatCount="indefinite"></animate>
  </rect>
</g><g transform="rotate(334.2857142857143 50 50)">
  <rect x="47.5" y="2.5" rx="2.5" ry="6.3" width="5" height="21" fill="#0062ff">
    <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5813953488372093s" begin="0s" repeatCount="indefinite"></animate>
  </rect>
</g>
<!-- [ldio] generated by https://loading.io/ --></svg>`

  //functions
  function modelLoaded() {
    // model.innerHTML = "";
    hotspots.forEach(hotspot => {
      hotspot.style.display = "block";
    });
  }

  function loadInfoBoxes() {
    head.innerHTML = spinner;
    fetch("https://swiftpixel.com/earbud/api/infoboxes")
    .then((response) => response.json())
    .then((infoBoxes) => {
      console.log(infoBoxes);

      // model.innerHTML = "";
      
        infoBoxes.forEach((infoBox, index) => {
        let selected = document.querySelector (`#hotspot-${index+1}`);
    
        const titleElement = document.createElement('h3');
        titleElement.textContent = infoBox.heading;
    
        const textElement = document.createElement('p');
        textElement.textContent = infoBox.description;
    
        const imgElement = document.createElement('img');
        imgElement.src = `images/${infoBox.thumbnail}`;
        
        // model.innerHTML = "";
        selected.appendChild(imgElement);
        selected.appendChild(titleElement);
        selected.appendChild(textElement);

        head.innerHTML = "";
        });
      })
          .catch((error) => { 
            console.error("Oops, you are not linked to the web. Check your connection.", error); //catch and report any errors

        });
      }



      loadInfoBoxes();
      
 

  function loadMaterialInfo() {
    
    fetch("https://swiftpixel.com/earbud/api/materials")
    .then((response) => response.json())
    .then((materialListData) => {
      console.log(materialList);

      materialListData.forEach(material => {
        // clone the template
        const clone = materialTemplate.content.cloneNode(true);
        // populate the cloned template
        const materialHeading = clone.querySelector(".material-heading");
        materialHeading.textContent = material.heading;
  
        const materialDescription = clone.querySelector(".material-description");
        materialDescription.textContent = material.description;
  
        
        // append the populated template to the list
        materialList.appendChild(clone);
      })
      // .catch((error) => console.error("Oops, you are not linked to the web. Check your connection.", error));
    });
   
  }

  loadMaterialInfo();
  
  function showInfo() {
    let selected = document.querySelector(`#${this.slot}`);
    gsap.to(selected, 1, { autoAlpha: 1 });
  }

  function hideInfo() {
    let selected = document.querySelector(`#${this.slot}`);
    gsap.to(selected, 1, { autoAlpha: 0 });
  }

  //Event listeners
  model.addEventListener("load", modelLoaded);

  hotspots.forEach(function (hotspot) {
    hotspot.addEventListener("mouseenter", showInfo);
    hotspot.addEventListener("mouseleave", hideInfo);
  });

})();

